# Generated by Django 3.0.2 on 2020-01-06 17:40

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': '操作日志表：AuditLog',
                'verbose_name_plural': '操作日志表：AuditLog',
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('ip_address', models.GenericIPAddressField(unique=True)),
                ('ip_port', models.SmallIntegerField(default=22)),
            ],
            options={
                'verbose_name': '服务器表：Host',
                'verbose_name_plural': '服务器表：Host',
            },
        ),
        migrations.CreateModel(
            name='HostGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'verbose_name': '服务器分组表：HostGroup',
                'verbose_name_plural': '服务器分组表：HostGroup',
            },
        ),
        migrations.CreateModel(
            name='HostToRemoteUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Web.Host')),
            ],
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name': '机房表：IDC',
                'verbose_name_plural': '机房表：IDC',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, unique=True, verbose_name='email address')),
                ('name', models.CharField(max_length=32, verbose_name='full name')),
                ('is_staff', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('host_group', models.ManyToManyField(blank=True, null=True, to='Web.HostGroup')),
                ('host_to_remote_users', models.ManyToManyField(blank=True, null=True, to='Web.HostToRemoteUser')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '堡垒机账号表：UserProfile',
                'verbose_name_plural': '堡垒机账号表：UserProfile',
            },
        ),
        migrations.CreateModel(
            name='RomoteUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auth_type', models.SmallIntegerField(choices=[(0, 'ssh-password'), (1, 'ssh-key')], default=0)),
                ('username', models.CharField(max_length=32)),
                ('password', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': '远程机器表：RomoteUser',
                'verbose_name_plural': '远程机器表：RomoteUser',
                'unique_together': {('auth_type', 'username', 'password')},
            },
        ),
        migrations.AddField(
            model_name='hosttoremoteuser',
            name='remote_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Web.RomoteUser'),
        ),
        migrations.AddField(
            model_name='hostgroup',
            name='host_to_remote_users',
            field=models.ManyToManyField(to='Web.HostToRemoteUser'),
        ),
        migrations.AddField(
            model_name='host',
            name='idc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Web.IDC'),
        ),
        migrations.AlterUniqueTogether(
            name='hosttoremoteuser',
            unique_together={('host', 'remote_user')},
        ),
    ]
